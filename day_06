{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# File Transfrering Using Python","metadata":{}},{"cell_type":"markdown","source":"## Client Side","metadata":{}},{"cell_type":"code","source":"# Client Side\n\nimport socket\nimport os\n\ndef send_file(file_path, host='127.0.0.1', port=5001, buffer_size=4096):\n    # Create TCP socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((host, port))\n\n    print(\"Client started\")\n\n    with open(file_path, 'rb') as f:\n        while True:\n            bytes_read = f.read(buffer_size)\n            if not bytes_read:\n                break\n            client_socket.sendall(bytes_read)\n\n    client_socket.close()\n    print(\"Client stopped\")\n\nif __name__ == \"__main__\":\n    file_send = \"lib.txt\"\n    send_file(file_send)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Server Side ","metadata":{}},{"cell_type":"code","source":"# ServerSide \nimport socket\n\ndef start_server(host='0.0.0.0', port=5001, filename=\"received_file.txt\", buffer_size=4096):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen(5)\n\n    print(f\"Server started, listening on {host}:{port}\")\n\n    conn, addr = server_socket.accept()\n    print(f\"Connection from {addr}\")\n\n    with open(filename, 'wb') as f:\n        while True:\n            bytes_read = conn.recv(buffer_size)\n            if not bytes_read:\n                break\n            f.write(bytes_read)\n\n    conn.close()\n    server_socket.close()\n    print(\"Server stopped\")\n\nif __name__ == \"__main__\":\n    start_server()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}